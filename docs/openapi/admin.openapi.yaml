paths:
  /api/admin/give-packs:
    post:
      tags:
        - Admin
      summary: Give packs to a user
      description: Adds packs to a user's inventory (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - quantity
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of the user to give packs to
                quantity:
                  type: integer
                  minimum: 1
                  description: Number of packs to give
              example:
                userId: "123e4567-e89b-12d3-a456-426614174000"
                quantity: 5
      responses:
        "200":
          description: Packs given successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  pack_count:
                    type: integer
        "400":
          description: Bad request - invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User or set not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/set-pack-quantity:
    post:
      tags:
        - Admin
      summary: Set user's pack quantity
      description: Sets the exact number of packs a user has for a specific set (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - quantity
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of the user
                quantity:
                  type: integer
                  minimum: 0
                  description: Exact number of packs to set
              example:
                userId: "123e4567-e89b-12d3-a456-426614174000"
                quantity: 10
      responses:
        "200":
          description: Pack quantity set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  pack_count:
                    type: integer
        "400":
          description: Bad request - invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User or set not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/user-pack-count/{userId}:
    get:
      tags:
        - Admin
      summary: Get user's pack count
      description: Retrieves the total pack count for a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the user whose pack count to retrieve
      responses:
        "200":
          description: User pack count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  pack_count:
                    type: integer
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/migrate:
    post:
      tags:
        - Admin
      summary: Run database migrations
      description: Executes all pending database migrations - useful for free tier deployments without SSH access (NO AUTH REQUIRED for initial setup)
      responses:
        "200":
          description: Migrations completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationResponse"
        "500":
          description: Migration failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MigrationErrorResponse"
        "503":
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/seed:
    post:
      tags:
        - Admin
      summary: Seed database with initial data
      description: Executes all queries from database-queries.sql to populate the database with cards, sets, and abilities (NO AUTH REQUIRED for initial setup)
      responses:
        "200":
          description: Database seeding completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedResponse"
        "207":
          description: Database seeding completed with some errors (partial success)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeedPartialResponse"
        "404":
          description: Database queries file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/database-status:
    get:
      tags:
        - Admin
      summary: Get database status
      description: Checks database connectivity, table existence, and migration status (NO AUTH REQUIRED for initial setup)
      responses:
        "200":
          description: Database is healthy and properly set up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseStatusResponse"
        "207":
          description: Database needs attention (missing tables or migrations)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseStatusResponse"
        "503":
          description: Database not accessible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseStatusResponse"

  /api/admin/create-ai-user:
    post:
      tags:
        - Admin
      summary: Create AI user
      description: Creates the AI user with predefined UUID for game automation (NO AUTH REQUIRED for initial setup)
      responses:
        "200":
          description: AI user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIUserResponse"
        "201":
          description: AI user created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIUserResponse"
        "503":
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/create-ai-decks:
    post:
      tags:
        - Admin
      summary: Create AI decks
      description: Creates decks for the AI user from available cards (NO AUTH REQUIRED for initial setup)
      responses:
        "200":
          description: AI decks created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIDecksResponse"
        "400":
          description: AI user not found or no cards available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Database connection failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/admin/trigger-ai-fate-pick:
    post:
      tags:
        - Admin
      summary: Trigger AI fate pick generation
      description: Manually triggers the automated fate pick generation for the AI user (NO AUTH REQUIRED for testing)
      responses:
        "200":
          description: AI fate pick generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIFatePickResponse"
        "400":
          description: Failed to generate AI fate pick
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          description: Error message describing what went wrong

    MigrationResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Database migrations completed successfully"
        output:
          type: string
          description: Migration command output
        warnings:
          type: string
          nullable: true
          description: Any warnings from the migration process
        timestamp:
          type: string
          format: date-time

    MigrationErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Failed to execute migrations"
        error:
          type: string
          description: Error details
        output:
          type: string
          nullable: true
          description: Migration command output if available
        stderr:
          type: string
          nullable: true
          description: Standard error output
        timestamp:
          type: string
          format: date-time

    SeedResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Database seeding completed successfully"
        summary:
          type: object
          properties:
            totalQueries:
              type: integer
              description: Total number of queries executed
            successful:
              type: integer
              description: Number of successful queries
            failed:
              type: integer
              description: Number of failed queries
            duplicatesIgnored:
              type: integer
              description: Number of duplicate key errors ignored
        timestamp:
          type: string
          format: date-time

    SeedPartialResponse:
      type: object
      properties:
        status:
          type: string
          example: "partial_success"
        message:
          type: string
          example: "Database seeding completed with some errors"
        summary:
          type: object
          properties:
            totalQueries:
              type: integer
            successful:
              type: integer
            failed:
              type: integer
            significantErrors:
              type: integer
              description: Number of non-duplicate errors
        errors:
          type: array
          items:
            type: object
            properties:
              queryNumber:
                type: integer
              query:
                type: string
                description: Truncated query text
              error:
                type: string
                description: Error message
        timestamp:
          type: string
          format: date-time

    DatabaseStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["healthy", "needs_attention", "error"]
        message:
          type: string
        details:
          type: object
          properties:
            database:
              type: object
              properties:
                connected:
                  type: boolean
                responseTime:
                  type: number
                  description: Database response time in milliseconds
                error:
                  type: string
                  nullable: true
            tables:
              type: object
              properties:
                exists:
                  type: array
                  items:
                    type: string
                  description: List of existing tables
                missing:
                  type: array
                  items:
                    type: string
                  description: List of missing critical tables
                error:
                  type: string
                  nullable: true
            migrations:
              type: object
              properties:
                status:
                  type: string
                  description: Latest migration status
                error:
                  type: string
                  nullable: true
            timestamp:
              type: string
              format: date-time
        recommendations:
          type: array
          items:
            type: string
          description: Suggested actions to fix any issues

    AIUserResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "AI user created successfully"
        user:
          type: object
          properties:
            user_id:
              type: string
              format: uuid
              example: "00000000-0000-0000-0000-000000000000"
            username:
              type: string
              example: "AI Opponent"
            email:
              type: string
              example: "ai@mythgame.com"
        timestamp:
          type: string
          format: date-time

    AIDecksResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "AI decks created successfully"
        decks:
          type: array
          items:
            type: object
            properties:
              deck_id:
                type: string
                format: uuid
              name:
                type: string
              cards_count:
                type: integer
        timestamp:
          type: string
          format: date-time

    AIFatePickResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Successfully created automated fate pick from Norse Mythology"
        data:
          type: object
          properties:
            fatePickId:
              type: string
              format: uuid
              description: ID of the created fate pick
            setUsed:
              type: string
              description: Name of the set used for the fate pick
            cardsGenerated:
              type: integer
              description: Number of cards generated in the pack
        timestamp:
          type: string
          format: date-time

  /api/admin/trigger-daily-rewards:
    post:
      tags:
        - Admin
      summary: Trigger daily rewards distribution
      description: Manually triggers the distribution of fate coins and packs to eligible users (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Daily rewards distributed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Successfully distributed 15 fate coins and 23 packs to eligible users"
                  data:
                    type: object
                    properties:
                      usersProcessed:
                        type: integer
                        description: Number of users who received rewards
                      fateCoinsDistributed:
                        type: integer
                        description: Total fate coins distributed
                      packsDistributed:
                        type: integer
                        description: Total packs distributed
                  timestamp:
                    type: string
                    format: date-time
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Internal server error during daily rewards distribution"
                  error:
                    type: string
                    description: Error details
                  timestamp:
                    type: string
                    format: date-time
