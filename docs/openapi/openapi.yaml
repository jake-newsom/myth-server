openapi: 3.0.0
info:
  title: Viking Vengeance API
  description: Complete API documentation for the Viking Vengeance game server
  version: 1.0.0

tags:
  - name: Authentication
    description: User registration and authentication
  - name: Game
    description: Game creation and gameplay
  - name: Matchmaking
    description: Matchmaking and PvP setup
  - name: System
    description: System status and health
  - name: Users
    description: User profile and card collection management
  - name: Cards
    description: Static card data
  - name: Decks
    description: Deck creation and management
  - name: Packs
    description: Card pack opening and inventory management
  - name: Sets
    description: Card set management
  - name: Admin
    description: Administrative functions
  - name: XP
    description: Card XP management and transfers
  - name: Currency
    description: Gold, gems, and pack purchasing
  - name: Friends
    description: Social features and friend management
  - name: Leaderboard
    description: Rankings and competitive features
  - name: Achievements
    description: Achievement system and progress tracking
  - name: Fate Picks
    description: Social pack opening and Fate coins
  - name: Mail
    description: In-game mail and inbox system

paths:
  # Authentication Endpoints
  /api/auth/register:
    $ref: "./auth.openapi.yaml#/paths/~1api~1auth~1register"

  /api/auth/login:
    $ref: "./auth.openapi.yaml#/paths/~1api~1auth~1login"

  # User Endpoints
  /api/users/me:
    $ref: "./user.openapi.yaml#/paths/~1api~1users~1me"

  /api/users/me/cards:
    $ref: "./user.openapi.yaml#/paths/~1api~1users~1me~1cards"

  /api/users/me/decks:
    $ref: "./user.openapi.yaml#/paths/~1api~1users~1me~1decks"

  /api/users/me/decks/{deckId}:
    $ref: "./user.openapi.yaml#/paths/~1api~1users~1me~1decks~1{deckId}"

  /api/users/me/active-games:
    get:
      tags:
        - Users
      summary: Get user's active games
      description: Retrieve all active games for the authenticated user with complete game state information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Active games retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  active_games:
                    type: array
                    items:
                      $ref: "#/components/schemas/ActiveGameDetails"

  # Card Endpoints
  /api/cards:
    $ref: "./card.openapi.yaml#/paths/~1api~1cards"

  /api/cards/{cardId}:
    $ref: "./card.openapi.yaml#/paths/~1api~1cards~1{cardId}"

  # Deck Endpoints
  /api/decks:
    $ref: "./deck.openapi.yaml#/paths/~1api~1decks"

  /api/decks/{deckId}:
    $ref: "./deck.openapi.yaml#/paths/~1api~1decks~1{deckId}"

  # User Card Endpoints
  /api/user-cards:
    $ref: "./userCard.openapi.yaml#/paths/~1api~1user-cards"

  # XP System Endpoints
  /api/xp/pools:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1pools"

  /api/xp/pools/{cardName}:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1pools~1{cardName}"

  /api/xp/transfer:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1transfer"

  /api/xp/sacrifice:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1sacrifice"

  /api/xp/apply:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1apply"

  /api/xp/history:
    $ref: "./xp.openapi.yaml#/paths/~1api~1xp~1history"

  # Currency System Endpoints
  /api/currency:
    $ref: "./currency.openapi.yaml#/paths/~1api~1currency"

  /api/currency/pack-prices:
    $ref: "./currency.openapi.yaml#/paths/~1api~1currency~1pack-prices"

  /api/currency/purchase-packs:
    $ref: "./currency.openapi.yaml#/paths/~1api~1currency~1purchase-packs"

  /api/currency/award:
    $ref: "./currency.openapi.yaml#/paths/~1api~1currency~1award"

  # Friends System Endpoints
  /api/friends:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends"

  /api/friends/requests:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1requests"

  /api/friends/search:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1search"

  /api/friends/status/{userId}:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1status~1{userId}"

  /api/friends/add:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1add"

  /api/friends/accept/{friendshipId}:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1accept~1{friendshipId}"

  /api/friends/reject/{friendshipId}:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1reject~1{friendshipId}"

  /api/friends/challenge/{friendId}:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1challenge~1{friendId}"

  /api/friends/{friendshipId}:
    $ref: "./friends.openapi.yaml#/paths/~1api~1friends~1{friendshipId}"

  # Leaderboard System Endpoints
  /api/leaderboard:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard"

  /api/leaderboard/stats:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1stats"

  /api/leaderboard/me:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1me"

  /api/leaderboard/me/history:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1me~1history"

  /api/leaderboard/me/around:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1me~1around"

  /api/leaderboard/user/{identifier}:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1user~1{identifier}"

  /api/leaderboard/me/initialize:
    $ref: "./leaderboard.openapi.yaml#/paths/~1api~1leaderboard~1me~1initialize"

  # Achievements System Endpoints
  /api/achievements:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements"

  /api/achievements/categories:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1categories"

  /api/achievements/{achievementKey}:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1{achievementKey}"

  /api/achievements/me/progress:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1me~1progress"

  /api/achievements/me/stats:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1me~1stats"

  /api/achievements/me/recent:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1me~1recent"

  /api/achievements/{achievementId}/claim:
    $ref: "./achievement.openapi.yaml#/paths/~1api~1achievements~1{achievementId}~1claim"

  # Fate Picks System Endpoints
  /api/fate-picks:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks"

  /api/fate-picks/stats:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks~1stats"

  /api/fate-picks/history:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks~1history"

  /api/fate-picks/{fatePickId}:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks~1{fatePickId}"

  /api/fate-picks/{fatePickId}/participate:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks~1{fatePickId}~1participate"

  /api/fate-picks/{fatePickId}/select:
    $ref: "./fatePick.openapi.yaml#/paths/~1api~1fate-picks~1{fatePickId}~1select"

  # Mail System Endpoints
  /api/mail:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail"

  /api/mail/stats:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1stats"

  /api/mail/counts:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1counts"

  /api/mail/recent:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1recent"

  /api/mail/{mailId}:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1{mailId}"

  /api/mail/{mailId}/read:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1{mailId}~1read"

  /api/mail/read/multiple:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1read~1multiple"

  /api/mail/read/all:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1read~1all"

  /api/mail/{mailId}/claim:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1{mailId}~1claim"

  /api/mail/claim/all:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1claim~1all"

  /api/mail/send/system:
    $ref: "./mail.openapi.yaml#/paths/~1api~1mail~1send~1system"

  # Game Endpoints
  /api/games/solo:
    $ref: "./game.openapi.yaml#/paths/~1api~1games~1solo"

  /api/games/{gameId}:
    $ref: "./game.openapi.yaml#/paths/~1api~1games~1{gameId}"

  /api/games/{gameId}/actions:
    $ref: "./game.openapi.yaml#/paths/~1api~1games~1{gameId}~1actions"

  /api/games/{gameId}/ai-action:
    $ref: "./game.openapi.yaml#/paths/~1api~1games~1{gameId}~1ai-action"

  # Matchmaking Endpoints
  /api/matchmaking/join:
    $ref: "./matchmaking.openapi.yaml#/paths/~1api~1matchmaking~1join"

  /api/matchmaking/status:
    $ref: "./matchmaking.openapi.yaml#/paths/~1api~1matchmaking~1status"

  /api/matchmaking/leave:
    $ref: "./matchmaking.openapi.yaml#/paths/~1api~1matchmaking~1leave"

  # Pack Endpoints
  /api/packs/open:
    $ref: "./pack.openapi.yaml#/paths/~1api~1packs~1open"

  /api/packs:
    $ref: "./pack.openapi.yaml#/paths/~1api~1packs"

  # Set Endpoints
  /api/sets:
    $ref: "./set.openapi.yaml#/paths/~1api~1sets"

  /api/sets/released:
    $ref: "./set.openapi.yaml#/paths/~1api~1sets~1released"

  /api/sets/{setId}:
    $ref: "./set.openapi.yaml#/paths/~1api~1sets~1{setId}"

  /api/sets/{setId}/release:
    $ref: "./set.openapi.yaml#/paths/~1api~1sets~1{setId}~1release"

  # Admin Endpoints
  /api/admin/give-packs:
    $ref: "./admin.openapi.yaml#/paths/~1api~1admin~1give-packs"

  /api/admin/set-pack-quantity:
    $ref: "./admin.openapi.yaml#/paths/~1api~1admin~1set-pack-quantity"

  /api/admin/user-pack-count/{userId}:
    $ref: "./admin.openapi.yaml#/paths/~1api~1admin~1user-pack-count~1{userId}"

  # System Endpoints
  /api/health:
    $ref: "./health.openapi.yaml#/paths/~1api~1health"

components:
  schemas:
    # Authentication schemas are defined inline in the auth.openapi.yaml paths

    # User schemas
    UserProfile:
      $ref: "./user.openapi.yaml#/components/schemas/UserProfile"

    # Card schemas
    CardResponse:
      $ref: "./card.openapi.yaml#/components/schemas/CardResponse"
    BaseCardResponse:
      $ref: "./card.openapi.yaml#/components/schemas/BaseCardResponse"
    StaticCardCollectionResponse:
      $ref: "./card.openapi.yaml#/components/schemas/StaticCardCollectionResponse"
    UserCard:
      $ref: "./userCard.openapi.yaml#/components/schemas/UserCard"

    # Deck schemas
    CreateDeckRequest:
      $ref: "./deck.openapi.yaml#/components/schemas/CreateDeckRequest"
    UpdateDeckRequest:
      $ref: "./deck.openapi.yaml#/components/schemas/UpdateDeckRequest"
    DeckDetailResponse:
      $ref: "./deck.openapi.yaml#/components/schemas/DeckDetailResponse"
    DeckSummary:
      $ref: "./user.openapi.yaml#/components/schemas/DeckSummary"

    # Game schemas
    BoardPosition:
      $ref: "./game.openapi.yaml#/components/schemas/BoardPosition"
    BoardCell:
      $ref: "./game.openapi.yaml#/components/schemas/BoardCell"
    Player:
      $ref: "./game.openapi.yaml#/components/schemas/Player"
    Game:
      $ref: "./game.openapi.yaml#/components/schemas/Game"
    GameAction:
      $ref: "./game.openapi.yaml#/components/schemas/GameAction"

    # Matchmaking schemas
    IdleResponse:
      $ref: "./matchmaking.openapi.yaml#/components/schemas/IdleResponse"
    QueuedResponse:
      $ref: "./matchmaking.openapi.yaml#/components/schemas/QueuedResponse"
    MatchedResponse:
      $ref: "./matchmaking.openapi.yaml#/components/schemas/MatchedResponse"
    LeftQueueResponse:
      $ref: "./matchmaking.openapi.yaml#/components/schemas/LeftQueueResponse"
    ErrorResponse:
      $ref: "./matchmaking.openapi.yaml#/components/schemas/ErrorResponse"

    # Pack schemas
    UserPackWithSetInfo:
      $ref: "./pack.openapi.yaml#/components/schemas/UserPackWithSetInfo"

    # Set schemas
    Set:
      $ref: "./set.openapi.yaml#/components/schemas/Set"
    SetWithCardCount:
      $ref: "./set.openapi.yaml#/components/schemas/SetWithCardCount"

    # Admin schemas
    UserPack:
      $ref: "./admin.openapi.yaml#/components/schemas/UserPack"

    # Mail schemas
    Mail:
      $ref: "./mail.openapi.yaml#/components/schemas/Mail"
    MailWithSender:
      $ref: "./mail.openapi.yaml#/components/schemas/MailWithSender"
    MailStats:
      $ref: "./mail.openapi.yaml#/components/schemas/MailStats"

    # Active Game schemas
    ActiveGameDetails:
      type: object
      properties:
        game_id:
          type: string
          format: uuid
          description: Unique identifier for the game
        player1_id:
          type: string
          format: uuid
          description: ID of player 1
        player2_id:
          type: string
          format: uuid
          description: ID of player 2 (AI opponent uses null UUID)
        player1_deck_id:
          type: string
          format: uuid
          description: Deck ID used by player 1
        player2_deck_id:
          type: string
          format: uuid
          description: Deck ID used by player 2
        game_mode:
          type: string
          enum: [solo, multiplayer]
          description: Type of game
        winner_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the winning player, null if game is ongoing
        game_status:
          type: string
          enum: [active, completed, abandoned]
          description: Current status of the game
        game_state:
          $ref: "#/components/schemas/GameState"
        board_layout:
          type: string
          example: "4x4"
          description: Board dimensions
        created_at:
          type: string
          format: date-time
          description: When the game was created
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: When the game was completed
        player1_username:
          type: string
          description: Username of player 1
        player2_username:
          type: string
          description: Username of player 2
      required:
        - game_id
        - player1_id
        - player2_id
        - player1_deck_id
        - player2_deck_id
        - game_mode
        - game_status
        - game_state
        - board_layout
        - created_at
        - player1_username
        - player2_username

    GameState:
      type: object
      properties:
        board:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/ActiveGameBoardCell"
          description: 2D array representing the game board
        status:
          type: string
          enum: [active, completed]
          description: Current game status
        winner:
          type: string
          format: uuid
          nullable: true
          description: Winner of the game
        player1:
          $ref: "#/components/schemas/GamePlayer"
        player2:
          $ref: "#/components/schemas/GamePlayer"
        turn_number:
          type: integer
          description: Current turn number
        current_player_id:
          type: string
          format: uuid
          description: ID of the player whose turn it is
        max_cards_in_hand:
          type: integer
          description: Maximum cards a player can hold
        initial_cards_to_draw:
          type: integer
          description: Number of cards drawn at game start
        hydrated_card_data_cache:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/HydratedCardData"
          description: Cache of detailed card information
      required:
        - board
        - status
        - player1
        - player2
        - turn_number
        - current_player_id
        - max_cards_in_hand
        - initial_cards_to_draw
        - hydrated_card_data_cache

    GamePlayer:
      type: object
      properties:
        deck:
          type: array
          items:
            type: string
            format: uuid
          description: Card instance IDs remaining in deck
        hand:
          type: array
          items:
            type: string
            format: uuid
          description: Card instance IDs in player's hand
        score:
          type: integer
          description: Current player score
        user_id:
          type: string
          format: uuid
          description: Player's user ID
        discard_pile:
          type: array
          items:
            type: string
            format: uuid
          description: Card instance IDs in discard pile
      required:
        - deck
        - hand
        - score
        - user_id
        - discard_pile

    HydratedCardData:
      type: object
      properties:
        level:
          type: integer
          description: Card level
        owner:
          type: string
          format: uuid
          description: Owner's user ID
        lockedTurns:
          type: integer
          description: Number of turns the card is locked
        base_card_id:
          type: string
          format: uuid
          description: Base card definition ID
        current_power:
          $ref: "#/components/schemas/PowerValues"
        base_card_data:
          $ref: "#/components/schemas/BaseCardGameData"
        temporary_effects:
          type: array
          items:
            type: object
          description: Temporary effects applied to the card
        power_enhancements:
          $ref: "#/components/schemas/PowerValues"
        user_card_instance_id:
          type: string
          format: uuid
          description: Unique card instance ID
        card_modifiers_negative:
          $ref: "#/components/schemas/PowerValues"
        card_modifiers_positive:
          $ref: "#/components/schemas/PowerValues"
      required:
        - level
        - owner
        - lockedTurns
        - base_card_id
        - current_power
        - base_card_data
        - temporary_effects
        - power_enhancements
        - user_card_instance_id
        - card_modifiers_negative
        - card_modifiers_positive

    BaseCardGameData:
      type: object
      properties:
        name:
          type: string
        tags:
          type: array
          items:
            type: string
        rarity:
          type: string
          enum: [common, uncommon, rare, epic, legendary]
        card_id:
          type: string
          format: uuid
        image_url:
          type: string
        base_power:
          $ref: "#/components/schemas/PowerValues"
        special_ability:
          $ref: "#/components/schemas/SpecialAbilityGameData"
          nullable: true
      required:
        - name
        - tags
        - rarity
        - card_id
        - image_url
        - base_power

    SpecialAbilityGameData:
      type: object
      properties:
        name:
          type: string
        ability_id:
          type: string
          format: uuid
        parameters:
          type: object
          additionalProperties: true
        description:
          type: string
        trigger_moment:
          type: string
          enum: [OnPlace, OnFlip, OnFlipped, OnTurnStart, OnTurnEnd]
      required:
        - name
        - ability_id
        - parameters
        - description
        - trigger_moment

    PowerValues:
      type: object
      properties:
        top:
          type: integer
        right:
          type: integer
        bottom:
          type: integer
        left:
          type: integer
      required:
        - top
        - right
        - bottom
        - left

    ActiveGameBoardCell:
      type: object
      properties:
        card:
          type: object
          nullable: true
          description: Card placed on this cell, null if empty
        turns_left:
          type: integer
          description: Number of turns remaining for any effect on this cell
        tile_status:
          type: string
          enum: [normal, blocked, boosted, drained]
          description: Status of the tile itself
        animation_label:
          type: string
          nullable: true
          description: Label for client-side animations
      required:
        - card
        - turns_left
        - tile_status
        - animation_label

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
