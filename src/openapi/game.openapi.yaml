openapi: 3.0.0
info:
  title: Viking Vengeance Game API
  description: API for game creation and gameplay
  version: 1.0.0

paths:
  /api/games/solo:
    post:
      summary: Create a new solo game against AI
      tags:
        - Game
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - deckId
              properties:
                deckId:
                  type: string
                  format: uuid
                  description: The ID of the player's deck to use
      responses:
        201:
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Invalid request (e.g., deck not found or invalid)
        401:
          description: Unauthorized - Invalid or missing token
        500:
          description: Server error

  /api/games/{gameId}:
    get:
      summary: Get game state
      tags:
        - Game
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the game to retrieve
      responses:
        200:
          description: Game retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: Game not found
        401:
          description: Unauthorized - Invalid or missing token
        500:
          description: Server error

  /api/games/{gameId}/actions:
    post:
      summary: Submit a game action
      tags:
        - Game
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the game to act on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameAction"
      responses:
        200:
          description: Action processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Invalid action
        404:
          description: Game not found
        401:
          description: Unauthorized - Invalid or missing token
        500:
          description: Server error

components:
  schemas:
    BoardPosition:
      type: object
      properties:
        x:
          type: integer
          minimum: 0
          maximum: 3
        y:
          type: integer
          minimum: 0
          maximum: 3

    CardPower:
      type: object
      properties:
        top:
          type: integer
        right:
          type: integer
        bottom:
          type: integer
        left:
          type: integer

    BoardCell:
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        originalCardData:
          type: object
          properties:
            card_id:
              type: string
              format: uuid
            name:
              type: string
            type:
              type: string
            rarity:
              type: string
            image_url:
              type: string
            special_ability_id:
              type: string
              nullable: true
        owner:
          type: string
        currentPower:
          $ref: "#/components/schemas/CardPower"
        state:
          type: string
          enum: [normal, immune, buffed, debuffed]

    Player:
      type: object
      properties:
        userId:
          type: string
        hand:
          type: array
          items:
            type: string
            format: uuid
        deck:
          type: array
          items:
            type: string
            format: uuid
        score:
          type: integer

    Game:
      type: object
      properties:
        game_id:
          type: string
          format: uuid
        player1_id:
          type: string
        player2_id:
          type: string
        game_mode:
          type: string
          enum: [solo, pvp]
        winner_id:
          type: string
          nullable: true
        game_status:
          type: string
          enum: [pending, active, completed, aborted]
        game_state:
          type: object
          properties:
            board:
              type: array
              items:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/BoardCell"
                    - type: "null"
            player1:
              $ref: "#/components/schemas/Player"
            player2:
              $ref: "#/components/schemas/Player"
            currentPlayerId:
              type: string
            turnNumber:
              type: integer
            status:
              type: string
              enum: [pending, active, completed, aborted]
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    GameAction:
      type: object
      required:
        - actionType
      properties:
        actionType:
          type: string
          enum: [placeCard, endTurn, surrender]
        cardId:
          type: string
          format: uuid
        position:
          $ref: "#/components/schemas/BoardPosition"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
